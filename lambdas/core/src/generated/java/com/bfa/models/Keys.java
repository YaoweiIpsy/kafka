/*
 * This file is generated by jOOQ.
 */
package com.bfa.models;


import com.bfa.models.tables.Author;
import com.bfa.models.tables.Card;
import com.bfa.models.tables.Cartitem;
import com.bfa.models.tables.Category;
import com.bfa.models.tables.Googlemapslocation;
import com.bfa.models.tables.Orderdetail;
import com.bfa.models.tables.Product;
import com.bfa.models.tables.Productimage;
import com.bfa.models.tables.User;
import com.bfa.models.tables._Migration;
import com.bfa.models.tables.records.AuthorRecord;
import com.bfa.models.tables.records.CardRecord;
import com.bfa.models.tables.records.CartitemRecord;
import com.bfa.models.tables.records.CategoryRecord;
import com.bfa.models.tables.records.GooglemapslocationRecord;
import com.bfa.models.tables.records.OrderdetailRecord;
import com.bfa.models.tables.records.ProductRecord;
import com.bfa.models.tables.records.ProductimageRecord;
import com.bfa.models.tables.records.UserRecord;
import com.bfa.models.tables.records._MigrationRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * next_graphql_admin.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<_MigrationRecord> KEY__MIGRATION_PRIMARY = Internal.createUniqueKey(_Migration._MIGRATION, DSL.name("KEY__Migration_PRIMARY"), new TableField[] { _Migration._MIGRATION.REVISION }, true);
    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_author_PRIMARY"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<CardRecord> KEY_CARD_PRIMARY = Internal.createUniqueKey(Card.CARD, DSL.name("KEY_Card_PRIMARY"), new TableField[] { Card.CARD.ID }, true);
    public static final UniqueKey<CartitemRecord> KEY_CARTITEM_PRIMARY = Internal.createUniqueKey(Cartitem.CARTITEM, DSL.name("KEY_CartItem_PRIMARY"), new TableField[] { Cartitem.CARTITEM.ID }, true);
    public static final UniqueKey<CategoryRecord> KEY_CATEGORY_CATEGORY_SLUG = Internal.createUniqueKey(Category.CATEGORY, DSL.name("KEY_Category_Category.slug"), new TableField[] { Category.CATEGORY.SLUG }, true);
    public static final UniqueKey<CategoryRecord> KEY_CATEGORY_PRIMARY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("KEY_Category_PRIMARY"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<GooglemapslocationRecord> KEY_GOOGLEMAPSLOCATION_PRIMARY = Internal.createUniqueKey(Googlemapslocation.GOOGLEMAPSLOCATION, DSL.name("KEY_GoogleMapsLocation_PRIMARY"), new TableField[] { Googlemapslocation.GOOGLEMAPSLOCATION.ID }, true);
    public static final UniqueKey<OrderdetailRecord> KEY_ORDERDETAIL_PRIMARY = Internal.createUniqueKey(Orderdetail.ORDERDETAIL, DSL.name("KEY_OrderDetail_PRIMARY"), new TableField[] { Orderdetail.ORDERDETAIL.ID }, true);
    public static final UniqueKey<ProductRecord> KEY_PRODUCT_PRIMARY = Internal.createUniqueKey(Product.PRODUCT, DSL.name("KEY_Product_PRIMARY"), new TableField[] { Product.PRODUCT.ID }, true);
    public static final UniqueKey<ProductRecord> KEY_PRODUCT_PRODUCT_SKU = Internal.createUniqueKey(Product.PRODUCT, DSL.name("KEY_Product_Product.sku"), new TableField[] { Product.PRODUCT.SKU }, true);
    public static final UniqueKey<ProductimageRecord> KEY_PRODUCTIMAGE_PRIMARY = Internal.createUniqueKey(Productimage.PRODUCTIMAGE, DSL.name("KEY_ProductImage_PRIMARY"), new TableField[] { Productimage.PRODUCTIMAGE.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_User_PRIMARY"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_USER_EMAIL = Internal.createUniqueKey(User.USER, DSL.name("KEY_User_User.email"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> KEY_USER_USER_GOOGLEID = Internal.createUniqueKey(User.USER, DSL.name("KEY_User_User.googleId"), new TableField[] { User.USER.GOOGLEID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CartitemRecord, UserRecord> CARTITEM_IBFK_1 = Internal.createForeignKey(Cartitem.CARTITEM, DSL.name("CartItem_ibfk_1"), new TableField[] { Cartitem.CARTITEM.USER }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<CartitemRecord, ProductRecord> CARTITEM_IBFK_2 = Internal.createForeignKey(Cartitem.CARTITEM, DSL.name("CartItem_ibfk_2"), new TableField[] { Cartitem.CARTITEM.PRODUCTID }, Keys.KEY_PRODUCT_PRIMARY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<OrderdetailRecord, UserRecord> ORDERDETAIL_IBFK_1 = Internal.createForeignKey(Orderdetail.ORDERDETAIL, DSL.name("OrderDetail_ibfk_1"), new TableField[] { Orderdetail.ORDERDETAIL.USERID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<OrderdetailRecord, GooglemapslocationRecord> ORDERDETAIL_IBFK_2 = Internal.createForeignKey(Orderdetail.ORDERDETAIL, DSL.name("OrderDetail_ibfk_2"), new TableField[] { Orderdetail.ORDERDETAIL.GOOGLEMAPSLOCATIONID }, Keys.KEY_GOOGLEMAPSLOCATION_PRIMARY, new TableField[] { Googlemapslocation.GOOGLEMAPSLOCATION.ID }, true);
    public static final ForeignKey<ProductRecord, CategoryRecord> PRODUCT_IBFK_1 = Internal.createForeignKey(Product.PRODUCT, DSL.name("Product_ibfk_1"), new TableField[] { Product.PRODUCT.CATEGORY }, Keys.KEY_CATEGORY_PRIMARY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<ProductRecord, UserRecord> PRODUCT_IBFK_2 = Internal.createForeignKey(Product.PRODUCT, DSL.name("Product_ibfk_2"), new TableField[] { Product.PRODUCT.USER }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<ProductimageRecord, ProductRecord> PRODUCTIMAGE_IBFK_1 = Internal.createForeignKey(Productimage.PRODUCTIMAGE, DSL.name("ProductImage_ibfk_1"), new TableField[] { Productimage.PRODUCTIMAGE.PRODUCTID }, Keys.KEY_PRODUCT_PRIMARY, new TableField[] { Product.PRODUCT.ID }, true);
}
