/*
 * This file is generated by jOOQ.
 */
package com.bfa.models.tables.daos;


import com.bfa.models.enums.UserRole;
import com.bfa.models.enums.UserStatus;
import com.bfa.models.tables.User;
import com.bfa.models.tables.records.UserRecord;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, com.bfa.models.tables.pojos.User, String> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, com.bfa.models.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(User.USER, com.bfa.models.tables.pojos.User.class, configuration);
    }

    @Override
    public String getId(com.bfa.models.tables.pojos.User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>billing BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfBilling(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.BILLING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>billing IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByBilling(String... values) {
        return fetch(User.USER.BILLING, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByEmail(String... values) {
        return fetch(User.USER.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public com.bfa.models.tables.pojos.User fetchOneByEmail(String value) {
        return fetchOne(User.USER.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<com.bfa.models.tables.pojos.User> fetchOptionalByEmail(String value) {
        return fetchOptional(User.USER.EMAIL, value);
    }

    /**
     * Fetch records that have <code>emailConfirmationToken BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfEmailconfirmationtoken(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAILCONFIRMATIONTOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>emailConfirmationToken IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByEmailconfirmationtoken(String... values) {
        return fetch(User.USER.EMAILCONFIRMATIONTOKEN, values);
    }

    /**
     * Fetch records that have <code>googleId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfGoogleid(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.GOOGLEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>googleId IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByGoogleid(String... values) {
        return fetch(User.USER.GOOGLEID, values);
    }

    /**
     * Fetch a unique record that has <code>googleId = value</code>
     */
    public com.bfa.models.tables.pojos.User fetchOneByGoogleid(String value) {
        return fetchOne(User.USER.GOOGLEID, value);
    }

    /**
     * Fetch a unique record that has <code>googleId = value</code>
     */
    public Optional<com.bfa.models.tables.pojos.User> fetchOptionalByGoogleid(String value) {
        return fetchOptional(User.USER.GOOGLEID, value);
    }

    /**
     * Fetch records that have <code>hasCompletedOnboarding BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfHascompletedonboarding(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(User.USER.HASCOMPLETEDONBOARDING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hasCompletedOnboarding IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByHascompletedonboarding(Byte... values) {
        return fetch(User.USER.HASCOMPLETEDONBOARDING, values);
    }

    /**
     * Fetch records that have <code>hasVerifiedEmail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfHasverifiedemail(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(User.USER.HASVERIFIEDEMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hasVerifiedEmail IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByHasverifiedemail(Byte... values) {
        return fetch(User.USER.HASVERIFIEDEMAIL, values);
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchById(String... values) {
        return fetch(User.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bfa.models.tables.pojos.User fetchOneById(String value) {
        return fetchOne(User.USER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.bfa.models.tables.pojos.User> fetchOptionalById(String value) {
        return fetchOptional(User.USER.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByName(String... values) {
        return fetch(User.USER.NAME, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByPassword(String... values) {
        return fetch(User.USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>resetToken BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfResettoken(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.RESETTOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>resetToken IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByResettoken(String... values) {
        return fetch(User.USER.RESETTOKEN, values);
    }

    /**
     * Fetch records that have <code>resetTokenExpiry BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfResettokenexpiry(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(User.USER.RESETTOKENEXPIRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>resetTokenExpiry IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByResettokenexpiry(BigDecimal... values) {
        return fetch(User.USER.RESETTOKENEXPIRY, values);
    }

    /**
     * Fetch records that have <code>role BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfRole(UserRole lowerInclusive, UserRole upperInclusive) {
        return fetchRange(User.USER.ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByRole(UserRole... values) {
        return fetch(User.USER.ROLE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchRangeOfStatus(UserStatus lowerInclusive, UserStatus upperInclusive) {
        return fetchRange(User.USER.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.User> fetchByStatus(UserStatus... values) {
        return fetch(User.USER.STATUS, values);
    }
}
