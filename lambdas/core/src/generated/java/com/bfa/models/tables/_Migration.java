/*
 * This file is generated by jOOQ.
 */
package com.bfa.models.tables;


import com.bfa.models.Keys;
import com.bfa.models.NextGraphqlAdmin;
import com.bfa.models.tables.records._MigrationRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _Migration extends TableImpl<_MigrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>next_graphql_admin._Migration</code>
     */
    public static final _Migration _MIGRATION = new _Migration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_MigrationRecord> getRecordType() {
        return _MigrationRecord.class;
    }

    /**
     * The column <code>next_graphql_admin._Migration.revision</code>.
     */
    public final TableField<_MigrationRecord, Integer> REVISION = createField(DSL.name("revision"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.name</code>.
     */
    public final TableField<_MigrationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.datamodel</code>.
     */
    public final TableField<_MigrationRecord, String> DATAMODEL = createField(DSL.name("datamodel"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.status</code>.
     */
    public final TableField<_MigrationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.applied</code>.
     */
    public final TableField<_MigrationRecord, Integer> APPLIED = createField(DSL.name("applied"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.rolled_back</code>.
     */
    public final TableField<_MigrationRecord, Integer> ROLLED_BACK = createField(DSL.name("rolled_back"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.datamodel_steps</code>.
     */
    public final TableField<_MigrationRecord, String> DATAMODEL_STEPS = createField(DSL.name("datamodel_steps"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.database_migration</code>.
     */
    public final TableField<_MigrationRecord, String> DATABASE_MIGRATION = createField(DSL.name("database_migration"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.errors</code>.
     */
    public final TableField<_MigrationRecord, String> ERRORS = createField(DSL.name("errors"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.started_at</code>.
     */
    public final TableField<_MigrationRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin._Migration.finished_at</code>.
     */
    public final TableField<_MigrationRecord, LocalDateTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.LOCALDATETIME(3), this, "");

    private _Migration(Name alias, Table<_MigrationRecord> aliased) {
        this(alias, aliased, null);
    }

    private _Migration(Name alias, Table<_MigrationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>next_graphql_admin._Migration</code> table
     * reference
     */
    public _Migration(String alias) {
        this(DSL.name(alias), _MIGRATION);
    }

    /**
     * Create an aliased <code>next_graphql_admin._Migration</code> table
     * reference
     */
    public _Migration(Name alias) {
        this(alias, _MIGRATION);
    }

    /**
     * Create a <code>next_graphql_admin._Migration</code> table reference
     */
    public _Migration() {
        this(DSL.name("_Migration"), null);
    }

    public <O extends Record> _Migration(Table<O> child, ForeignKey<O, _MigrationRecord> key) {
        super(child, key, _MIGRATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : NextGraphqlAdmin.NEXT_GRAPHQL_ADMIN;
    }

    @Override
    public Identity<_MigrationRecord, Integer> getIdentity() {
        return (Identity<_MigrationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<_MigrationRecord> getPrimaryKey() {
        return Keys.KEY__MIGRATION_PRIMARY;
    }

    @Override
    public _Migration as(String alias) {
        return new _Migration(DSL.name(alias), this);
    }

    @Override
    public _Migration as(Name alias) {
        return new _Migration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public _Migration rename(String name) {
        return new _Migration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _Migration rename(Name name) {
        return new _Migration(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, String, Integer, Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
