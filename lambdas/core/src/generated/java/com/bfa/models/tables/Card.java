/*
 * This file is generated by jOOQ.
 */
package com.bfa.models.tables;


import com.bfa.models.Keys;
import com.bfa.models.NextGraphqlAdmin;
import com.bfa.models.tables.records.CardRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Card extends TableImpl<CardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>next_graphql_admin.Card</code>
     */
    public static final Card CARD = new Card();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardRecord> getRecordType() {
        return CardRecord.class;
    }

    /**
     * The column <code>next_graphql_admin.Card.brand</code>.
     */
    public final TableField<CardRecord, String> BRAND = createField(DSL.name("brand"), SQLDataType.VARCHAR(191).nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin.Card.expMonth</code>.
     */
    public final TableField<CardRecord, Integer> EXPMONTH = createField(DSL.name("expMonth"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin.Card.expYear</code>.
     */
    public final TableField<CardRecord, Integer> EXPYEAR = createField(DSL.name("expYear"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin.Card.id</code>.
     */
    public final TableField<CardRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(191).nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin.Card.last4Digits</code>.
     */
    public final TableField<CardRecord, String> LAST4DIGITS = createField(DSL.name("last4Digits"), SQLDataType.VARCHAR(191).nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin.Card.stripePaymentMethodId</code>.
     */
    public final TableField<CardRecord, String> STRIPEPAYMENTMETHODID = createField(DSL.name("stripePaymentMethodId"), SQLDataType.VARCHAR(191).nullable(false), this, "");

    private Card(Name alias, Table<CardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Card(Name alias, Table<CardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>next_graphql_admin.Card</code> table reference
     */
    public Card(String alias) {
        this(DSL.name(alias), CARD);
    }

    /**
     * Create an aliased <code>next_graphql_admin.Card</code> table reference
     */
    public Card(Name alias) {
        this(alias, CARD);
    }

    /**
     * Create a <code>next_graphql_admin.Card</code> table reference
     */
    public Card() {
        this(DSL.name("Card"), null);
    }

    public <O extends Record> Card(Table<O> child, ForeignKey<O, CardRecord> key) {
        super(child, key, CARD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : NextGraphqlAdmin.NEXT_GRAPHQL_ADMIN;
    }

    @Override
    public UniqueKey<CardRecord> getPrimaryKey() {
        return Keys.KEY_CARD_PRIMARY;
    }

    @Override
    public Card as(String alias) {
        return new Card(DSL.name(alias), this);
    }

    @Override
    public Card as(Name alias) {
        return new Card(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(String name) {
        return new Card(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(Name name) {
        return new Card(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, Integer, Integer, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
