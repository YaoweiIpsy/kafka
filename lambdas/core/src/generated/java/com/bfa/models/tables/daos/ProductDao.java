/*
 * This file is generated by jOOQ.
 */
package com.bfa.models.tables.daos;


import com.bfa.models.tables.Product;
import com.bfa.models.tables.records.ProductRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductDao extends DAOImpl<ProductRecord, com.bfa.models.tables.pojos.Product, String> {

    /**
     * Create a new ProductDao without any configuration
     */
    public ProductDao() {
        super(Product.PRODUCT, com.bfa.models.tables.pojos.Product.class);
    }

    /**
     * Create a new ProductDao with an attached configuration
     */
    public ProductDao(Configuration configuration) {
        super(Product.PRODUCT, com.bfa.models.tables.pojos.Product.class, configuration);
    }

    @Override
    public String getId(com.bfa.models.tables.pojos.Product object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfCategory(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.CATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByCategory(String... values) {
        return fetch(Product.PRODUCT.CATEGORY, values);
    }

    /**
     * Fetch records that have <code>createdAt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfCreatedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Product.PRODUCT.CREATEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdAt IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByCreatedat(LocalDateTime... values) {
        return fetch(Product.PRODUCT.CREATEDAT, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByDescription(String... values) {
        return fetch(Product.PRODUCT.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>discount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfDiscount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.DISCOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>discount IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByDiscount(Integer... values) {
        return fetch(Product.PRODUCT.DISCOUNT, values);
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchById(String... values) {
        return fetch(Product.PRODUCT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bfa.models.tables.pojos.Product fetchOneById(String value) {
        return fetchOne(Product.PRODUCT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.bfa.models.tables.pojos.Product> fetchOptionalById(String value) {
        return fetchOptional(Product.PRODUCT.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByName(String... values) {
        return fetch(Product.PRODUCT.NAME, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfPrice(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByPrice(Integer... values) {
        return fetch(Product.PRODUCT.PRICE, values);
    }

    /**
     * Fetch records that have <code>salePrice BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfSaleprice(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.SALEPRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>salePrice IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchBySaleprice(Integer... values) {
        return fetch(Product.PRODUCT.SALEPRICE, values);
    }

    /**
     * Fetch records that have <code>sku BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfSku(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.SKU, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sku IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchBySku(String... values) {
        return fetch(Product.PRODUCT.SKU, values);
    }

    /**
     * Fetch a unique record that has <code>sku = value</code>
     */
    public com.bfa.models.tables.pojos.Product fetchOneBySku(String value) {
        return fetchOne(Product.PRODUCT.SKU, value);
    }

    /**
     * Fetch a unique record that has <code>sku = value</code>
     */
    public Optional<com.bfa.models.tables.pojos.Product> fetchOptionalBySku(String value) {
        return fetchOptional(Product.PRODUCT.SKU, value);
    }

    /**
     * Fetch records that have <code>unit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfUnit(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.UNIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>unit IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByUnit(String... values) {
        return fetch(Product.PRODUCT.UNIT, values);
    }

    /**
     * Fetch records that have <code>updatedAt BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfUpdatedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Product.PRODUCT.UPDATEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updatedAt IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByUpdatedat(LocalDateTime... values) {
        return fetch(Product.PRODUCT.UPDATEDAT, values);
    }

    /**
     * Fetch records that have <code>user BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchRangeOfUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Product> fetchByUser(String... values) {
        return fetch(Product.PRODUCT.USER, values);
    }
}
