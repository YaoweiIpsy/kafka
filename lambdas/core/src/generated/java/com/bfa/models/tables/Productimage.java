/*
 * This file is generated by jOOQ.
 */
package com.bfa.models.tables;


import com.bfa.models.Keys;
import com.bfa.models.NextGraphqlAdmin;
import com.bfa.models.tables.records.ProductimageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Productimage extends TableImpl<ProductimageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>next_graphql_admin.ProductImage</code>
     */
    public static final Productimage PRODUCTIMAGE = new Productimage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductimageRecord> getRecordType() {
        return ProductimageRecord.class;
    }

    /**
     * The column <code>next_graphql_admin.ProductImage.createdAt</code>.
     */
    public final TableField<ProductimageRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>next_graphql_admin.ProductImage.id</code>.
     */
    public final TableField<ProductimageRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(191).nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin.ProductImage.image</code>.
     */
    public final TableField<ProductimageRecord, String> IMAGE = createField(DSL.name("image"), SQLDataType.VARCHAR(191).nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin.ProductImage.productId</code>.
     */
    public final TableField<ProductimageRecord, String> PRODUCTID = createField(DSL.name("productId"), SQLDataType.VARCHAR(191).nullable(false), this, "");

    /**
     * The column <code>next_graphql_admin.ProductImage.updatedAt</code>.
     */
    public final TableField<ProductimageRecord, LocalDateTime> UPDATEDAT = createField(DSL.name("updatedAt"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Productimage(Name alias, Table<ProductimageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Productimage(Name alias, Table<ProductimageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>next_graphql_admin.ProductImage</code> table
     * reference
     */
    public Productimage(String alias) {
        this(DSL.name(alias), PRODUCTIMAGE);
    }

    /**
     * Create an aliased <code>next_graphql_admin.ProductImage</code> table
     * reference
     */
    public Productimage(Name alias) {
        this(alias, PRODUCTIMAGE);
    }

    /**
     * Create a <code>next_graphql_admin.ProductImage</code> table reference
     */
    public Productimage() {
        this(DSL.name("ProductImage"), null);
    }

    public <O extends Record> Productimage(Table<O> child, ForeignKey<O, ProductimageRecord> key) {
        super(child, key, PRODUCTIMAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : NextGraphqlAdmin.NEXT_GRAPHQL_ADMIN;
    }

    @Override
    public UniqueKey<ProductimageRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTIMAGE_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProductimageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCTIMAGE_IBFK_1);
    }

    private transient Product _product;

    /**
     * Get the implicit join path to the <code>next_graphql_admin.Product</code>
     * table.
     */
    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.PRODUCTIMAGE_IBFK_1);

        return _product;
    }

    @Override
    public Productimage as(String alias) {
        return new Productimage(DSL.name(alias), this);
    }

    @Override
    public Productimage as(Name alias) {
        return new Productimage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Productimage rename(String name) {
        return new Productimage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Productimage rename(Name name) {
        return new Productimage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<LocalDateTime, String, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
