/*
 * This file is generated by jOOQ.
 */
package com.bfa.models.tables.daos;


import com.bfa.models.tables.Googlemapslocation;
import com.bfa.models.tables.records.GooglemapslocationRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GooglemapslocationDao extends DAOImpl<GooglemapslocationRecord, com.bfa.models.tables.pojos.Googlemapslocation, String> {

    /**
     * Create a new GooglemapslocationDao without any configuration
     */
    public GooglemapslocationDao() {
        super(Googlemapslocation.GOOGLEMAPSLOCATION, com.bfa.models.tables.pojos.Googlemapslocation.class);
    }

    /**
     * Create a new GooglemapslocationDao with an attached configuration
     */
    public GooglemapslocationDao(Configuration configuration) {
        super(Googlemapslocation.GOOGLEMAPSLOCATION, com.bfa.models.tables.pojos.Googlemapslocation.class, configuration);
    }

    @Override
    public String getId(com.bfa.models.tables.pojos.Googlemapslocation object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>googlePlacesId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Googlemapslocation> fetchRangeOfGoogleplacesid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Googlemapslocation.GOOGLEMAPSLOCATION.GOOGLEPLACESID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>googlePlacesId IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Googlemapslocation> fetchByGoogleplacesid(String... values) {
        return fetch(Googlemapslocation.GOOGLEMAPSLOCATION.GOOGLEPLACESID, values);
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Googlemapslocation> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Googlemapslocation.GOOGLEMAPSLOCATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Googlemapslocation> fetchById(String... values) {
        return fetch(Googlemapslocation.GOOGLEMAPSLOCATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bfa.models.tables.pojos.Googlemapslocation fetchOneById(String value) {
        return fetchOne(Googlemapslocation.GOOGLEMAPSLOCATION.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.bfa.models.tables.pojos.Googlemapslocation> fetchOptionalById(String value) {
        return fetchOptional(Googlemapslocation.GOOGLEMAPSLOCATION.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bfa.models.tables.pojos.Googlemapslocation> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Googlemapslocation.GOOGLEMAPSLOCATION.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bfa.models.tables.pojos.Googlemapslocation> fetchByName(String... values) {
        return fetch(Googlemapslocation.GOOGLEMAPSLOCATION.NAME, values);
    }
}
